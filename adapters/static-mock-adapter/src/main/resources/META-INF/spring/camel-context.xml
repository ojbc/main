<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2017 Open Justice Broker Consortium

-->
<!-- Configures the Camel Context -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:ctx="http://www.springframework.org/schema/context" xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cht-doc="http://ojbc.org/IEPD/Exchange/CriminalHistoryTextDocument/1.0"
	xsi:schemaLocation="
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring-3.10.0.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	
	<camel:camelContext xmlns="http://camel.apache.org/schema/spring" id="Static_Mock_Adapter">

		<!-- Search endpoints -->

		<endpoint id="personSearchRequestServiceEndpoint"
			uri="cxf:bean:personSearchRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personSearchRequestMockCxflogging}" />
			
		<endpoint id="personSearchResultsHandlerServiceEndpoint"
			uri="cxf:bean:personSearchResultsHandlerService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personSearchRequestMockCxflogging}" />
					
		<endpoint id="custodySearchRequestServiceEndpoint"
			uri="cxf:bean:custodySearchRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.custodySearchRequestMockCxflogging}" />

		<endpoint id="custodySearchResultsServiceEndpoint"
			uri="cxf:bean:custodySearchResultsHandlerService?dataFormat=PAYLOAD&amp;headerFilterStrategy=#dropAllMessageHeadersStrategy&amp;loggingFeatureEnabled=${genericMockAdapter.custodySearchRequestMockCxflogging}" />

		<endpoint id="courtCaseSearchRequestServiceEndpoint"
			uri="cxf:bean:courtCaseSearchRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.courtCaseSearchRequestMockCxflogging}" />

		<endpoint id="courtCaseSearchResultsServiceEndpoint"
			uri="cxf:bean:courtCaseSearchResultsHandlerService?dataFormat=PAYLOAD&amp;headerFilterStrategy=#dropAllMessageHeadersStrategy&amp;loggingFeatureEnabled=${genericMockAdapter.courtCaseSearchRequestMockCxflogging}" />

		<endpoint id="personSearchAdapterDir"
			uri="file:///${genericMockAdapter.personSearchRequest.mockFileEndpoint}" />

		<endpoint id="firearmSearchRequestServiceEndpoint"
			uri="cxf:bean:FirearmSearchRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.firearmSearchRequestMockCxflogging}" />

		<endpoint id="firearmSearchResultsServiceEndpoint"
			uri="cxf:bean:FirearmSearchResultsService?dataFormat=PAYLOAD&amp;headerFilterStrategy=#dropAllMessageHeadersStrategy&amp;loggingFeatureEnabled=${genericMockAdapter.firearmSearchRequestMockCxflogging}" />

		<endpoint id="firearmSearchAdapterDir"
			uri="file:///${genericMockAdapter.firearmSearchRequest.mockFileEndpoint}" />

		<endpoint id="vehicleSearchRequestServiceEndpoint"
			uri="cxf:bean:VehicleSearchRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.vehicleSearchRequestMockCxflogging}" />

		<endpoint id="vehicleSearchResultsServiceEndpoint"
			uri="cxf:bean:VehicleSearchResultsService?dataFormat=PAYLOAD&amp;headerFilterStrategy=#dropAllMessageHeadersStrategy&amp;loggingFeatureEnabled=${genericMockAdapter.vehicleSearchRequestMockCxflogging}" />

		<endpoint id="vehicleSearchAdapterDir"
			uri="file:///${genericMockAdapter.vehicleSearchRequest.mockFileEndpoint}" />

		<endpoint id="incidentSearchRequestServiceEndpoint"
			uri="cxf:bean:IncidentSearchRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.incidentSearchRequestMockCxflogging}" />

		<endpoint id="incidentSearchResultsServiceEndpoint"
			uri="cxf:bean:IncidentSearchResultsService?dataFormat=PAYLOAD&amp;headerFilterStrategy=#dropAllMessageHeadersStrategy&amp;loggingFeatureEnabled=${genericMockAdapter.incidentSearchRequestMockCxflogging}" />

		<endpoint id="custodyQueryRequestServiceEndpoint"
			uri="cxf:bean:custodyQueryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.CustodyQueryMockCxflogging}" />

		<endpoint id="custodyQueryResultsHandlerServiceEndpoint"
			uri="cxf:bean:custodyQueryResultsHandlerService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.CustodyQueryMockCxflogging}" />

		<endpoint id="courtCaseQueryRequestServiceEndpoint"
			uri="cxf:bean:courtCaseQueryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.courtCaseQueryMockCxflogging}" />

		<endpoint id="courtCaseQueryResultsServiceEndpoint"
			uri="cxf:bean:courtCaseQueryResultsHandlerService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.courtCaseQueryMockCxflogging}" />

		<endpoint id="vehicleCrashQueryRequestServiceEndpoint"
			uri="cxf:bean:vehicleCrashQueryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.courtCaseQueryMockCxflogging}" />

		<endpoint id="vehicleCrashQueryResultsServiceEndpoint"
			uri="cxf:bean:vehicleCrashQueryResultsHandlerService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.courtCaseQueryMockCxflogging}" />

		<!-- Criminal History Query Endpoints -->
		<endpoint id="personQueryRequestCriminalHistoryServiceEndpoint"
			uri="cxf:bean:personQueryRequestCriminalHistoryService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="personQueryResultsHandlerCriminalHistoryServiceEndpoint"
			uri="cxf:bean:personQueryResultsHandlerCriminalHistoryService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<!-- Warrants Query Endpoints -->
		<endpoint id="personQueryRequestWarrantsServiceEndpoint"
			uri="cxf:bean:personQueryRequestWarrantsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="personQueryResultsHandlerWarrantsServiceEndpoint"
			uri="cxf:bean:personQueryResultsHandlerWarrantsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<!-- Incident Report Query Endpoints -->
		<endpoint id="personQueryIncidentReportRequestServiceEndpoint"
			uri="cxf:bean:incidentReportRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="personQueryIncidentReportResultsServiceEndpoint"
			uri="cxf:bean:incidentReportResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<!-- Firearm Query Endpoints -->
		<endpoint id="personQueryFirearmRegistratonQueryRequestServiceEndpoint"
			uri="cxf:bean:firearmRegistrationQueryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="personQueryFirearmRegistratonQueryResultsServiceEndpoint"
			uri="cxf:bean:firearmRegistrationQueryResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />
			
		<!--  Case Plan -->
		<endpoint id="juvenileCasePlanHistoryRequestServiceEndpoint"
			uri="cxf:bean:juvenileCasePlanHistoryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="juvenileCasePlanHistoryResultsServiceEndpoint"
			uri="cxf:bean:juvenileCasePlanHistoryResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<!--  Hearing -->
		<endpoint id="juvenileHearingHistoryRequestServiceEndpoint"
			uri="cxf:bean:juvenileHearingHistoryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="juvenileHearingHistoryResultsServiceEndpoint"
			uri="cxf:bean:juvenileHearingHistoryResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<!--  Intake -->
		<endpoint id="juvenileIntakeHistoryRequestServiceEndpoint"
			uri="cxf:bean:juvenileIntakeHistoryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="juvenileIntakeHistoryResultsServiceEndpoint"
			uri="cxf:bean:juvenileIntakeHistoryResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<!--  Offense -->
		<endpoint id="juvenileOffenseHistoryRequestServiceEndpoint"
			uri="cxf:bean:juvenileOffenseHistoryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="juvenileOffenseHistoryResultsServiceEndpoint"
			uri="cxf:bean:juvenileOffenseHistoryResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<!--  Placement -->
		<endpoint id="juvenilePlacementHistoryRequestServiceEndpoint"
			uri="cxf:bean:juvenilePlacementHistoryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="juvenilePlacementHistoryResultsServiceEndpoint"
			uri="cxf:bean:juvenilePlacementHistoryResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<!--  Referral -->
		<endpoint id="juvenileReferralHistoryRequestServiceEndpoint"
			uri="cxf:bean:juvenileReferralHistoryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="juvenileReferralHistoryResultsServiceEndpoint"
			uri="cxf:bean:juvenileReferralHistoryResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />
			
		<!-- File endpoints for Queries -->
		<endpoint id="criminalHistoryAdapterDir"
			uri="file:///${genericMockAdapter.personQuery.mockFileEndpoint}/criminalHistory/" />

		<endpoint id="warrantsAdapterDir"
			uri="file:///${genericMockAdapter.personQuery.mockFileEndpoint}/warrants/" />

		<endpoint id="incidentReportDir"
			uri="file:///${genericMockAdapter.personQuery.mockFileEndpoint}/incidentReport/" />

		<endpoint id="firearmRegistrationQueryDir"
			uri="file:///${genericMockAdapter.personQuery.mockFileEndpoint}/firearmRegQuery/" />

		<!--  firearms Purchase Prohibition Query -->
		<endpoint id="firearmsPurchaseProhibitionQueryServiceEndpoint"
			uri="cxf:bean:firearmsPurchaseProhibitionQueryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<endpoint id="firearmsPurchaseProhibitionQueryResultsServiceEndpoint"
			uri="cxf:bean:firearmsPurchaseProhibitionQueryResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.personQueryMockCxflogging}" />

		<!--  Wildlife License Query -->
		<endpoint id="personQueryWildlifeLicenseRequestServiceEndpoint"
			uri="cxf:bean:personQueryWildlifeLicenseRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.wildlifeLicenseRequestMockCxflogging}" />

		<endpoint id="personQueryWildlifeLicenseResultsServiceEndpoint"
			uri="cxf:bean:personQueryWildlifeLicenseResultsService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${genericMockAdapter.wildlifeLicenseRequestMockCxflogging}" />

			
		<!-- Person Search Handler -->

		<camel:route id="personSearchRequestService">
			<camel:from uri="personSearchRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
						
			<camel:log message="Inside Person Search Request Mock Adapter Route" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}${date:now:yyyy-MM-dd'T'HHmmssSSS}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID} and OJB State Context: ${in.headers.ojbStateContext}" />

			<camel:log message="Calling static mock adapter" />

			<camel:to
				uri="bean:staticMockAdapterProcessor?method=search" />

			<camel:setHeader name="operationName">
				<constant>ReportPersonSearchResults</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/PersonSearchResultsService/1.0</constant>
			</camel:setHeader>

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:to uri="personSearchResultsHandlerServiceEndpoint" />
			<camel:log message="Called Person Search Response Handler" />
		</camel:route>



		<camel:route id="custodySearchRequestService">
			<camel:from uri="custodySearchRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
						
			<camel:log message="\n\n\n Inside Custody Search Request Mock Adapter Route \n\n\n" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}${date:now:yyyy-MM-dd'T'HHmmssSSS}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID} and OJB State Context: ${in.headers.ojbStateContext}" />

			<camel:log message="\n\n\n Calling static mock adapter processor...\n\n\n" />

			<camel:to uri="bean:staticMockAdapterProcessor?method=search" />

			<camel:setHeader name="operationName">
				<constant>SubmitCustodySearchResults</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/CustodySearchResultsService/1.0</constant>
			</camel:setHeader>

			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:log message="\n\n\n Calling Custody Search Response Handler... \n\n\n" />

			<camel:to uri="custodySearchResultsServiceEndpoint" />
			
		</camel:route>


		<camel:route id="courtCaseSearchRequestService">
		
			<camel:from uri="courtCaseSearchRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
						
			<camel:log message="\n\n\n Inside Court Case Search Request Mock Adapter Route \n\n\n" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}${date:now:yyyy-MM-dd'T'HHmmssSSS}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID} and OJB State Context: ${in.headers.ojbStateContext}" />

			<camel:log message="\n\n\n Calling static mock adapter processor...\n\n\n" />

			<camel:to uri="bean:staticMockAdapterProcessor?method=search" />

			<camel:setHeader name="operationName">
				<constant>SubmitCourtCaseSearchRequest</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/CourtCaseSearchRequestService/1.0</constant>
			</camel:setHeader>

			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:log message="\n\n\n Calling Court Case Search Response Handler... \n\n\n" />

			<camel:to uri="courtCaseSearchResultsServiceEndpoint" />
			
		</camel:route>


		<!-- Firearm Search Handler -->

		<camel:route id="firearmSearchRequestService">
			<camel:from uri="firearmSearchRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
						
			<camel:log message="Inside Firearm Search Request Mock Adapter Route" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID} and OJB State Context: ${in.headers.ojbStateContext}" />

			<camel:log message="Calling static mock adapter" />

			<camel:to
				uri="bean:staticMockAdapterProcessor?method=search" />

			<camel:setHeader name="operationName">
				<constant>SubmitFirearmSearchResults</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/FirearmSearchResultsService/1.0</constant>
			</camel:setHeader>

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:to uri="firearmSearchResultsServiceEndpoint" />
		</camel:route>

		<!-- Vehicle Search Handler -->

		<camel:route id="vehicleSearchRequestService">
			<camel:from uri="vehicleSearchRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
						
			<camel:log message="Inside Vehicle Search Request Mock Adapter Route" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID} and OJB State Context: ${in.headers.ojbStateContext}" />

			<camel:log message="Calling static mock adapter" />

			<camel:to
				uri="bean:staticMockAdapterProcessor?method=search" />

			<camel:setHeader name="operationName">
				<constant>SubmitVehicleSearchResults</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/VehicleSearchResultsService/1.0</constant>
			</camel:setHeader>

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:to uri="vehicleSearchResultsServiceEndpoint" />
		</camel:route>

		<!-- Incident Search Handler -->

		<camel:route id="incidentSearchRequestService">
			<camel:from uri="incidentSearchRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
									
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID} and operation name: ${in.headers.operationName}" />

			<camel:convertBodyTo type="java.lang.String" />

			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/IncidentSearchResultsService/1.0</constant>
			</camel:setHeader>

			<camel:filter>
				<camel:simple>${in.headers.operationName} == 'SubmitIncidentSearchRequest'</camel:simple>
				<camel:log message="Incident search request service operation invoked" />

				<camel:log message="Calling static mock adapter" />
				<camel:to
					uri="bean:staticMockAdapterProcessor?method=search" />

				<!-- Create new exchange using Camel header as the WS Addressing Message 
					ID -->
				<camel:to
					uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

				<camel:setHeader name="operationName">
					<constant>SubmitIncidentSearchResults</constant>
				</camel:setHeader>
			</camel:filter>

			<camel:filter>
				<camel:simple>${in.headers.operationName} == 'SubmitIncidentPersonSearchRequest'</camel:simple>
				<camel:log
					message="Incident Person search request service operation invoked (search by person ID)" />

				<camel:log message="Calling static mock adapter" />
				<camel:to
					uri="bean:staticMockAdapterProcessor?method=search" />

				<!-- Create new exchange using Camel header as the WS Addressing Message 
					ID -->
				<camel:to
					uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

				<camel:setHeader name="operationName">
					<constant>SubmitIncidentPersonSearchResults</constant>
				</camel:setHeader>
			</camel:filter>

			<camel:filter>
				<camel:simple>${in.headers.operationName} == 'SubmitIncidentVehicleSearchRequest'</camel:simple>
				<camel:log
					message="Incident Vehicle search request service operation invoked (search by vehicle ID)" />

				<camel:log message="Calling static mock adapter" />
				<camel:to
					uri="bean:staticMockAdapterProcessor?method=search" />

				<!-- Create new exchange using Camel header as the WS Addressing Message 
					ID -->
				<camel:to
					uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

				<camel:setHeader name="operationName">
					<constant>SubmitIncidentVehicleSearchResults</constant>
				</camel:setHeader>
			</camel:filter>

			<camel:to uri="incidentSearchResultsServiceEndpoint" />
		</camel:route>

		<!-- Criminal History Query Request Handler -->
		<camel:route id="criminalHistoryQueryRequestService">
			<camel:from uri="personQueryRequestCriminalHistoryServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="Inside Person Query Criminal History Mock" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="Calling static mock adapter" />

			<camel:to
				uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />
			<camel:choice>
				<camel:when>
					<camel:xpath>/cht-doc:CriminalHistoryTextDocument</camel:xpath>
					<camel:setHeader name="operationName">
						<constant>SubmitCriminalHistoryTextDocument</constant>
					</camel:setHeader>
				</camel:when>
				<camel:otherwise>
					<camel:setHeader name="operationName">
						<constant>SubmitCriminalHistoryQueryResults</constant>
					</camel:setHeader>
				</camel:otherwise>
			</camel:choice>
 			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/Criminal_History_Query_Results_Service/1.0</constant>
			</camel:setHeader>

			<camel:to uri="personQueryResultsHandlerCriminalHistoryServiceEndpoint" />
			<camel:log message="Called Criminal History Response Handler" />
		</camel:route>
		
		
		<!-- Custody Query Request Handler -->
		<camel:route id="custodyQueryRequestRoute">
		
			<camel:from uri="custodyQueryRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="\n\n\n Inside Custody Query Mock \n\n\n" />
			
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="\n\n\n Calling staticMockAdapterProcessor \n\n\n" />

			<camel:to uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>SubmitCustodyQueryResults</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/CustodyQueryResultsService/1.0</constant>
			</camel:setHeader>

			<camel:log message="\n\n\n Calling Custody Query Result endpoint...  \n\n\n" />

			<camel:to uri="custodyQueryResultsHandlerServiceEndpoint" />			
			
		</camel:route>		
		
		<!-- Firearm Purchase Prohibition Query Request Handler -->
		<camel:route id="firearmsPurchaseProhibitionQueryServiceRoute">
		
			<camel:from uri="firearmsPurchaseProhibitionQueryServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="\n\n\n Inside Firearms Purchase Prohibition Query Service Mock \n\n\n" />
			
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="\n\n\n Calling staticMockAdapterProcessor \n\n\n" />

			<camel:to uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>SubmitFirearmPurchaseProhibitionQueryResults</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/Firearm_Purchase_Prohibition_Query_Results_Service/1.0</constant>
			</camel:setHeader>

			<camel:log message="\n\n\n Calling Firearm Purchase Prohibition Query Result endpoint...  \n\n\n" />

			<camel:to uri="firearmsPurchaseProhibitionQueryResultsServiceEndpoint" />			
			
		</camel:route>		
		
		<!-- Wildlife Licnese Query Request Handler -->
		<camel:route id="personQueryWildlifeLicenseRequestServiceRoute">
		
			<camel:from uri="personQueryWildlifeLicenseRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="\n\n\n Inside Wildlife License Query Service Mock \n\n\n" />
			
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="\n\n\n Calling staticMockAdapterProcessor \n\n\n" />

			<camel:to uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

        	<camel:setHeader name="operationName">
        		<constant>SubmitWildlifeLicenseQueryResults</constant>
        	</camel:setHeader>
       		<camel:setHeader name="operationNamespace">
       			<constant>http://ojbc.org/Services/WSDL/Wildlife_License_Query_Results_Service/1.0</constant>
       		</camel:setHeader>

			<camel:log message="\n\n\n Calling Wildlife License Query Result endpoint...  \n\n\n" />

			<camel:to uri="personQueryWildlifeLicenseResultsServiceEndpoint" />			
			
		</camel:route>				
		
		<!-- Court Case Query Request Handler -->
		<camel:route id="courtCaseQueryRequestRoute">
		
			<camel:from uri="courtCaseQueryRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="\n\n\n Inside Court Case Query Mock \n\n\n" />
			
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="\n\n\n Calling staticMockAdapterProcessor \n\n\n" />

			<camel:to uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>SubmitCourtCaseQueryResults</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/CourtCaseQueryResultsService/1.0</constant>
			</camel:setHeader>

			<camel:log message="\n\n\n Calling Court Case Query Result endpoint...  \n\n\n" />

			<camel:to uri="courtCaseQueryResultsServiceEndpoint" />			
			
		</camel:route>				
		
		<!-- Vehicle Crash Query Request Handler -->
		<camel:route id="vehicleCrashQueryRequestRoute">
		
			<camel:from uri="vehicleCrashQueryRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="\n\n\n Inside Vehicle Crash Query Mock \n\n\n" />
			
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="\n\n\n Calling staticMockAdapterProcessor \n\n\n" />

			<camel:to uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>SubmitVehicleCrashQueryResults</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/Vehicle_Crash_Query_Results_Service/1.0</constant>
			</camel:setHeader>

			<camel:log message="Calling Vehicle Crash Query Result endpoint...  " />

			<camel:to uri="vehicleCrashQueryResultsServiceEndpoint" />			
			
		</camel:route>				
		
		<!-- Warrants Query Request Handler -->
		<camel:route id="warrantQueryRequestService">
			<camel:from uri="personQueryRequestWarrantsServiceEndpoint" />

			<camel:to uri="direct:auditLog"/>
						
			<camel:log message="Inside Person Query Criminal Warrants Mock" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="Calling static mock adapter" />

			<camel:to
				uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>Report-Person-Query-Results---Warrants</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/Person_Query_Results_Handler_Service-Warrants/1.0</constant>
			</camel:setHeader>

			<camel:to uri="personQueryResultsHandlerWarrantsServiceEndpoint" />
			<camel:log message="Called Warrants Response Handler" />
		</camel:route>

		<!-- Incident Report Request Handler -->
		<camel:route id="incidentReportQueryRequestService">
			<camel:from uri="personQueryIncidentReportRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="Inside Person Query Incident Report Mock" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="Calling static mock adapter" />

			<camel:to
				uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>ReportIncident</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/IncidentReportingService/1.0</constant>
			</camel:setHeader>

			<camel:to uri="personQueryIncidentReportResultsServiceEndpoint" />
			<camel:log message="Called Incident Report Response Handler" />
		</camel:route>

		<!-- Firearm Report Request Handler -->
		<camel:route id="firearmReportQueryRequestService" xmlns:firearms-exchange="http://ojbc.org/IEPD/Exchange/FirearmRegistrationQueryResults/1.0">

			<camel:from
				uri="personQueryFirearmRegistratonQueryRequestServiceEndpoint" />
				
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="Inside Person Query Firearm Reg Detail Mock" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="Calling static mock adapter" />

			<camel:to
				uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="firearmQueryResultByPerson">
				<xpath resultType="java.lang.String">count(//firearms-exchange:PersonFirearmRegistrationQueryResults)</xpath>
			</camel:setHeader>

			<camel:setHeader name="firearmQueryResultByFirearm">
				<xpath resultType="java.lang.String">count(//firearms-exchange:FirearmRegistrationQueryResults)</xpath>
			</camel:setHeader>

			<camel:filter>
				<camel:simple>${in.header.firearmQueryResultByPerson} == 1 &amp;&amp; ${in.header.firearmQueryResultByFirearm} == 0</camel:simple>
				<camel:log message="Use operation name for Firearm Query Result by Person" />

				<camel:setHeader name="operationName">
					<constant>SubmitPersonFirearmRegistrationQueryResults</constant>
				</camel:setHeader>
			</camel:filter>

			<camel:filter>
				<camel:simple>${in.header.firearmQueryResultByPerson} == 0 &amp;&amp; ${in.header.firearmQueryResultByFirearm} == 1</camel:simple>
				<camel:log message="Use operation name for Firearm Query Result by Firearm" />

				<camel:setHeader name="operationName">
					<constant>SubmitFirearmRegistrationQueryResults</constant>
				</camel:setHeader>
			</camel:filter>

			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/FirearmRegistrationQueryResultsService/1.0</constant>
			</camel:setHeader>

			<camel:to uri="personQueryFirearmRegistratonQueryResultsServiceEndpoint" />
			<camel:log message="Called Firearm Query Response Handler" />
		</camel:route>

		<!-- Juvenile Case Plan Request Handler -->
		<camel:route id="juvenileCasePlanHistoryRequestServiceEndpointRoute">
			<camel:from uri="juvenileCasePlanHistoryRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="Inside Juvenile Case Plan Mock" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="Calling static mock adapter" />
			
			<camel:setProperty name="org.ojbc.bundles.adapters.StaticMockAdapterProcessor.context">
				<constant>JuvenileCasePlanHistory</constant>
			</camel:setProperty>
			
			<camel:to
				uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>SubmitJuvenileCasePlanHistoryResponse</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/JuvenileHistoryResults/CasePlanResults/1.0</constant>
			</camel:setHeader>

			<camel:to uri="juvenileCasePlanHistoryResultsServiceEndpoint" />
			<camel:log message="Called Juvenile Case Plan Handler" />
		</camel:route>

		<!-- Juvenile Hearing Request Handler -->
		<camel:route id="juvenileHearingHistoryRequestServiceEndpointRoute">
			<camel:from uri="juvenileHearingHistoryRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="Inside Juvenile Hearing Mock" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="Calling static mock adapter" />

			<camel:setProperty name="org.ojbc.bundles.adapters.StaticMockAdapterProcessor.context">
				<constant>JuvenileHearingHistory</constant>
			</camel:setProperty>
			
			<camel:to
				uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>SubmitJuvenileHearingHistoryResponse</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/JuvenileHistoryResults/HearingResults/1.0</constant>
			</camel:setHeader>

			<camel:to uri="juvenileHearingHistoryResultsServiceEndpoint" />
			<camel:log message="Called Juvenile Hearing Handler" />
		</camel:route>

		<!-- Juvenile Intake Request Handler -->
		<camel:route id="juvenileIntakeHistoryRequestServiceEndpointRoute">
			<camel:from uri="juvenileIntakeHistoryRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="Inside Juvenile Intake Mock" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="Calling static mock adapter" />

			<camel:setProperty name="org.ojbc.bundles.adapters.StaticMockAdapterProcessor.context">
				<constant>JuvenileIntakeHistory</constant>
			</camel:setProperty>
			
			<camel:to
				uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>SubmitJuvenileIntakeHistoryResponse</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/JuvenileHistoryResults/IntakeResults/1.0</constant>
			</camel:setHeader>

			<camel:to uri="juvenileIntakeHistoryResultsServiceEndpoint" />
			<camel:log message="Called Juvenile Intake Handler" />
		</camel:route>
		
		<!-- Juvenile Offense Request Handler -->
		<camel:route id="juvenileOffenseHistoryRequestServiceEndpointRoute">
			<camel:from uri="juvenileOffenseHistoryRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="Inside Juvenile Offense Mock" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="Calling static mock adapter" />

			<camel:setProperty name="org.ojbc.bundles.adapters.StaticMockAdapterProcessor.context">
				<constant>JuvenileOffenseHistory</constant>
			</camel:setProperty>
			
			<camel:to
				uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>SubmitJuvenileOffenseHistoryResponse</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/JuvenileHistoryResults/OffenseResults/1.0</constant>
			</camel:setHeader>

			<camel:to uri="juvenileOffenseHistoryResultsServiceEndpoint" />
			<camel:log message="Called Juvenile Offense Handler" />
		</camel:route>
		
		<!-- Juvenile Placement Request Handler -->
		<camel:route id="juvenilePlacementHistoryRequestServiceEndpointRoute">
			<camel:from uri="juvenilePlacementHistoryRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="Inside Juvenile Placement Mock" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="Calling static mock adapter" />

			<camel:setProperty name="org.ojbc.bundles.adapters.StaticMockAdapterProcessor.context">
				<constant>JuvenilePlacementHistory</constant>
			</camel:setProperty>
			
			<camel:to
				uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>SubmitJuvenilePlacementHistoryResponse</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/JuvenileHistoryResults/PlacementResults/1.0</constant>
			</camel:setHeader>

			<camel:to uri="juvenilePlacementHistoryResultsServiceEndpoint" />
			<camel:log message="Called Juvenile Placement Handler" />
		</camel:route>		

		<!-- Juvenile Referral Request Handler -->
		<camel:route id="juvenileReferralHistoryRequestServiceEndpointRoute">
			<camel:from uri="juvenileReferralHistoryRequestServiceEndpoint" />
			
			<camel:to uri="direct:auditLog"/>
			
			<camel:log message="Inside Juvenile Referral Mock" />
			<camel:to uri="bean:messageProcessor?method=processRequestPayload" />

			<camel:setHeader name="CamelFileName">
				<simple>${in.header.platformSafeFileName}.xml</simple>
			</camel:setHeader>

			<camel:log
				message="WS-Addressing Message ID: ${in.headers.federatedQueryRequestGUID}" />

			<camel:log message="Calling static mock adapter" />

			<camel:setProperty name="org.ojbc.bundles.adapters.StaticMockAdapterProcessor.context">
				<constant>JuvenileReferralHistory</constant>
			</camel:setProperty>
			
			<camel:to
				uri="bean:staticMockAdapterProcessor?method=query" />

			<!-- Create new exchange using Camel header as the WS Addressing Message 
				ID -->
			<camel:to
				uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage" />

			<camel:setHeader name="operationName">
				<constant>SubmitJuvenileReferralHistoryResponse</constant>
			</camel:setHeader>
			<camel:setHeader name="operationNamespace">
				<constant>http://ojbc.org/Services/WSDL/JuvenileHistoryResults/ReferralResults/1.0</constant>
			</camel:setHeader>

			<camel:to uri="juvenileReferralHistoryResultsServiceEndpoint" />
			<camel:log message="Called Juvenile Referral Handler" />
		</camel:route>	

		<camel:route>
			<camel:from uri="direct:auditLog"/>
		
			<camel:choice>
				<camel:when>
					<camel:simple>${properties:genericMockAdapter.dbAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:to uri="bean:sqlLoggingProcessor?method=logExchange"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>
		</camel:route>

	</camel:camelContext>

	<!-- Spring Beans -->

	<bean id="staticMockAdapterProcessor" class="org.ojbc.bundles.adapters.StaticMockAdapterProcessor">
		<property name="staticMockQuery" ref="staticMockQuery" />
	</bean>

	<bean id="staticMockQuery" class="org.ojbc.bundles.adapters.staticmock.StaticMockQuery" />

	<bean id="messageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor" />
		
</beans>
