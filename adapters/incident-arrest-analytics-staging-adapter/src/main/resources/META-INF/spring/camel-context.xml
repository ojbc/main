<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2017 Open Justice Broker Consortium

-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:cxf="http://camel.apache.org/schema/cxf/jaxws"
	xmlns:ctx="http://www.springframework.org/schema/context" 
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:lexspd="http://usdoj.gov/leisp/lexs/publishdiscover/3.1"
	xsi:schemaLocation="
	   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring-4.12.0.xsd
       http://camel.apache.org/schema/cxf/jaxws http://camel.apache.org/schema/cxf/jaxws/camel-cxf-spring-soap-4.12.0-spring.xsd
	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- needed cxf imports -->
    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    
	<camel:camelContext xmlns="http://camel.apache.org/schema/spring" id="incident-arrest-analytics-staging-adapter" streamCache="true">

		<endpoint id="incidentReportingServiceAdapterEndpoint"
			uri="cxf:bean:incidentReportingServiceAdapter?dataFormat=PAYLOAD&amp;loggingFeatureEnabled={{analyticsAdapter.cxflogging}}" />

		<endpoint id="incidentReportingFileEndpoint"
			uri="file://{{analyticsAdapter.inputDirectory}}/incident/input?idempotent=true&amp;moveFailed={{analyticsAdapter.inputDirectory}}/incident/error&amp;recursive=true&amp;delete=true&amp;maxMessagesPerPoll=100" />

		<endpoint id="invocationFailedFileEndpoint"
			uri="file://{{analyticsAdapter.inputDirectory}}/failed" />

		<endpoint id="pretrialEnrollmentRequestServiceAdapterEndpoint"
			uri="cxf:bean:pretrialEnrollmentRequestAdapter?dataFormat=PAYLOAD&amp;loggingFeatureEnabled={{analyticsAdapter.cxflogging}}" />
					
		<endpoint id="pretrialEnrollmentReportingFileEndpoint"
			uri="file://{{analyticsAdapter.inputDirectory}}/pretrial/input?idempotent=true&amp;moveFailed={{analyticsAdapter.inputDirectory}}/pretrial/error&amp;move=processed/" />
			
 		<endpoint id="dispositionReportingServiceAdapterEndpoint"
			uri="cxf:bean:dispositionReportingServiceAdapter?dataFormat=PAYLOAD&amp;loggingFeatureEnabled={{analyticsAdapter.cxflogging}}"/>				
			
		<endpoint id="dispositionReportingFileEndpoint"
			uri="file://{{analyticsAdapter.inputDirectory}}/disposition/input?idempotent=true&amp;moveFailed={{analyticsAdapter.inputDirectory}}/disposition/error&amp;move=processed/" />

		<!-- Incident Reporting Route -->
		<camel:route id="Incident_Repository_Service" >
		
			<camel:from	uri="incidentReportingServiceAdapterEndpoint" />
			
			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>
			
			<camel:to uri="direct:processIncident" />
			
		</camel:route>	
		
		<camel:route id="Incident_Repository_Service_Filedrop">
		
			<camel:from	uri="incidentReportingFileEndpoint" />
			
			<!-- Some historic extracts have doPublish as the root, wrap in proper Incident Report wrapper -->
			<camel:filter>
				<camel:xpath>/lexspd:doPublish</camel:xpath>
				<camel:to uri="xslt:xslt/wrapIncidentReport.xslt"/>
			</camel:filter>
			
			<camel:to uri="direct:processIncident" />
		</camel:route>
		
		<camel:route id="Incident_Repository_Service_Process_Incident" startupOrder="1">				
			
			<camel:from	uri="direct:processIncident" />

			<camel:doTry>
						
				<camel:log message="Here is the inbound incident reporting message: ${body}" loggingLevel="DEBUG"/>
				
				<camel:to uri="bean:incidentReportProcessor?method=processReport"/>
				
				<camel:doCatch >
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:log message="An exception was thrown: ${exception.stacktrace}" loggingLevel="INFO"/>				
					
					<camel:setHeader name="CamelFileName">
						<camel:simple>incident/FailedIncident_${date:now:yyyyMMdd}_${date:now:HHmmssSS}.xml</camel:simple>
					</camel:setHeader>	

					<log message="Incident Report document failure. File Name to persist is: ${in.headers.CamelFileName}"/>
					
					<camel:to uri="direct:failedInvocation"/>
				</camel:doCatch>
			
			</camel:doTry>
			
		</camel:route>		

		<camel:route id="Pretrial_Service_Enrollment_Reporting_Service_Route">
		
			<camel:from	uri="pretrialEnrollmentRequestServiceAdapterEndpoint" />
		
			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>
			
			<camel:log message="Here is the inbound pretrial message: ${body}" loggingLevel="DEBUG"/>
				
			<camel:to uri="direct:processPretrialServiceReport" />
			
		</camel:route>		

 		<camel:route id="Pretrial_Repository_Service_Filedrop">
		
			<camel:from	uri="pretrialEnrollmentReportingFileEndpoint" />
			
			<camel:to uri="direct:processPretrialServiceReport" />
		</camel:route>
		
		<camel:route id="Pretrial_Repository_Service_Process" startupOrder="2">				
			
			<camel:from	uri="direct:processPretrialServiceReport" />

			<camel:doTry>
						
				<camel:log message="Here is the inbound pretrial enrollment reporting message: ${body}" loggingLevel="DEBUG"/>
				
				<camel:to uri="bean:pretrialEnrollmentReportProcessor?method=processReport"/>
				
				<camel:doCatch >
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:log message="An exception was thrown: ${exception.message}" loggingLevel="INFO"/>				
					
					<camel:setHeader name="CamelFileName">
						<camel:simple>pretrial/FailedPretrial_${date:now:yyyyMMdd}_${date:now:HHmmssSS}.xml</camel:simple>
					</camel:setHeader>	

					<log message="Pretrial Enrollment Report document failure. File Name to persist is: ${in.headers.CamelFileName}"/>
					
					<camel:to uri="direct:failedInvocation"/>
				</camel:doCatch>
			
			</camel:doTry>
			
		</camel:route>
		
		<camel:route id="Disposition_Reporting_Service_Route">
		
			<camel:from	uri="dispositionReportingServiceAdapterEndpoint" />
			
			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>
			
			<camel:log message="Here is the inbound disposition report message: ${body}" loggingLevel="DEBUG"/>
				
			<camel:to uri="direct:processDispositionReport" />
			
		</camel:route>		

 		<camel:route id="Disposition_Reporting_Service_Filedrop">
		
			<camel:from	uri="dispositionReportingFileEndpoint" />
			
			<camel:to uri="direct:processDispositionReport" />
		</camel:route>
		
				
		<camel:route id="Disposition_Reporting_Service_Process_Route" startupOrder="3">
		
			<camel:from	uri="direct:processDispositionReport" />
			
			<camel:doTry>
						
				<camel:log message="Here is the inbound disposition reporting message: ${body}" loggingLevel="DEBUG"/>
				
				<camel:to uri="bean:dispositionReportProcessor?method=processReport"/>
				
				<camel:doCatch >
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:log message="An exception was thrown: ${exception.stacktrace}" loggingLevel="INFO"/>				
					
					<camel:setHeader name="CamelFileName">
						<camel:simple>disposition/FailedDisposition_${date:now:yyyyMMdd}_${date:now:HHmmssSS}.xml</camel:simple>
					</camel:setHeader>	

					<log message="Disposition Report document failure. File Name to persist is: ${in.headers.CamelFileName}"/>
					
					<camel:to uri="direct:failedInvocation"/>
				</camel:doCatch>
			
			</camel:doTry>			
				
			
		</camel:route>		
		
		<camel:route id="Failed_Invocation_Route">
			<camel:from uri="direct:failedInvocation"/>
			
			<camel:log message="Invocation failed. File will be persisted: ${in.headers.CamelFileName}"/>
			
			<camel:log message="FileName: ${in.headers.CamelFileName} \n. An exception was thrown: ${exception.message}" loggingLevel="ERROR" logName="org.ojbc.adapters.analyticaldatastore.logger"/>
			
			<camel:to uri="invocationFailedFileEndpoint" id="invocationFailedFileEndpoint"/>
			
		</camel:route>
		
		<camel:route id="IndexBackupRoute">
			<from uri="timer://simpleTimer?fixedRate=true&amp;period=3600000&amp;delay=300"/>
			<to uri="bean:indexedIdentifierGenerationStrategy?method=backup"/>
			<camel:log message="Backed up index to: ${body}"/>
		</camel:route>
		
	</camel:camelContext>

</beans>
