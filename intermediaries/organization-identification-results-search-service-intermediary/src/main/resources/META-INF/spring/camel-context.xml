<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2017 Open Justice Broker Consortium

-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:oirs-req-doc="http://ojbc.org/IEPD/Exchange/OrganizationIdentificationResultsSearchRequest/1.0"
	xmlns:oirs-req-ext="http://ojbc.org/IEPD/Extensions/OrganizationIdentificationResultsSearchRequest/1.0"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:camel="http://camel.apache.org/schema/spring" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- needed cxf imports -->

	<import resource="classpath:META-INF/cxf/cxf.xml" />

	<camelContext xmlns="http://camel.apache.org/schema/spring"
		id="organization-identification-results-search-service-intermediary" streamCache="true">
		
		<!-- Rapback Search Request Endpoints -->
		<endpoint id="rapbackSearchRequestServiceEndpoint"
			uri="cxf:bean:rapbackSearchRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${rapbackSearchIntermediary.cxflogging}" />
			
		<endpoint id="rapbackSearchRequestServiceAdapterEndpoint"
			uri="cxf:bean:rapbackDataStoreAdapter?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${rapbackSearchIntermediary.cxflogging}" />

		<endpoint id="rapbackSearchResultsHandlerServiceEndpoint"
			uri="cxf:bean:rapbackSearchResultsHandlerService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${rapbackSearchIntermediary.cxflogging}" />
			
		<endpoint id="presentRapbackSearchResultServiceEndpoint"
			uri="cxf:bean:presentRapbackSearchResultService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${rapbackSearchIntermediary.cxflogging}" />

		<!-- Rapback Search Request flow -->
		<route id="rapbackSearchRequestRoute">
			<from uri="rapbackSearchRequestServiceEndpoint" />
			<onException>
				<exception>java.lang.Exception</exception>
				<handled><constant>true</constant></handled>
				<camel:log message="An exception was thrown: ${exception.message}"
					loggingLevel="WARN" />
			</onException>
			<log message="${body}"></log>
			
			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>
			
			<camel:choice>
				<camel:when>
					<camel:simple>${properties:rapbackSearchIntermediary.dbEnancedAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:to uri="bean:organizationIdentificationSearchSQLLoggingProcessor?method=auditIdentificationSearchRequest"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}" loggingLevel="ERROR"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>			
			
			<!-- Get the SAML Token from the request message and put into OJB SAML Map -->
			<camel:to uri="bean:camelSAMLTokenProcessor?method=retrieveSAMLTokenFromMessage"/>

			<camel:setHeader name="federatedQueryEndpointsNodeList">
				<camel:xpath>/oirs-req-doc:OrganizationIdentificationResultsSearchRequest/oirs-req-ext:IdentificationResultsCategoryCode</camel:xpath>
			</camel:setHeader>

			<camel:setHeader name="operationName">
	            <constant>SubmitOrganizationIdentificationResultsSearchRequest</constant>
	        </camel:setHeader>
	        <camel:setHeader name="operationNamespace">
	            <constant>http://ojbc.org/Services/WSDL/OrganizationIdentificationResultsSearchRequestService/1.0</constant>
	        </camel:setHeader>
	        
			<!-- We only call one endpoint -->						
			<camel:setHeader name="adapterURI">
				<camel:xpath resultType="java.lang.String">/oirs-req-doc:OrganizationIdentificationResultsSearchRequest/oirs-req-ext:IdentificationResultsCategoryCode</camel:xpath>
			</camel:setHeader>
			
			<!-- Add the reply to address to the map using the federated query guid as the key -->
			<camel:to 
				uri="bean:wsAddressingReplyToManager?method=putReplyToAddress"/>
									
			<!-- Call method to populate federated query map -->
			<camel:to
				uri="bean:federatedQueryMessageProcessor?method=processSystemName" />
			
			<!-- Set search request as message body header.  We will split on the source system name and will need the original request -->
			<camel:setHeader name="requestMessageBody">
				<camel:simple resultType="org.w3c.dom.Document">${body}</camel:simple>
			</camel:setHeader>

			<!-- This wiretap will start the message timer. -->
			<camel:wireTap uri="direct:startFederatedQueryTimer"/>

			<camel:log message="Timer started"/>

			<camel:split onPrepareRef="prepareFederateQueryMessage" parallelProcessing="false">
				<camel:xpath>/oirs-req-doc:OrganizationIdentificationResultsSearchRequest/oirs-req-ext:IdentificationResultsCategoryCode</camel:xpath>
				<camel:log message="This is the split body: ${body}.  This is the webservice endpoint to call: ${in.headers.webServiceEndpointToCall}" loggingLevel="DEBUG"/>	
				
				<camel:recipientList>
					<camel:header>webServiceEndpointToCall</camel:header>
				</camel:recipientList>
				
			</camel:split>
		</route>

		<camel:route>
			<from uri="direct:startFederatedQueryTimer"/>
			<setBody>
				<constant>START_QUERY_TIMER</constant>
			</setBody>
			<camel:to uri="direct:aggregateFederatedQuery" />		
		</camel:route>
	
		<route id="rapbackSearchResponseRoute">
			<from uri="rapbackSearchResultsHandlerServiceEndpoint" />
			
			<camel:to uri="bean:federatedQueryMessageProcessor?method=processFederatedResponse" />
			
			<camel:choice>
				<camel:when>
					<camel:simple>${properties:rapbackSearchIntermediary.dbEnancedAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:to uri="bean:organizationIdentificationSearchResponseSQLLoggingProcessor?method=auditIdentificationSearchResponse"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}" loggingLevel="ERROR"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>					
			
			<!-- Put response auditing here -->
			
			<camel:log message="Calling Aggregator" />
			<camel:to uri="direct:aggregateFederatedQuery" />
			
<!-- 			<to uri="presentRapbackSearchResultServiceEndpoint" />
			<log message="Called Web App Present Rapback Search Result Service" />
 -->		
 		</route>

	    <camel:route>
	      <from uri="direct:aggregateFederatedQuery" />
			<log message="In aggregator with correlation id: ${in.header.federatedQueryRequestGUID}"/>
			<aggregate strategyRef="groupedExchangeAggregationStrategy" eagerCheckCompletion="true">
				<correlationExpression>
					<camel:header>federatedQueryRequestGUID</camel:header>
				</correlationExpression>
				<completionTimeoutExpression>
					<camel:simple>${properties:rapbackSearchIntermediary.rapbackSearchIntermediaryFederatedQueryTimeout}</camel:simple>
				</completionTimeoutExpression>
				<completionSizeExpression><constant>2</constant></completionSizeExpression>
				<log
					message="completed by $simple{exchangeProperty.CamelAggregatedCompletedBy}, completion size $simple{exchangeProperty.CamelAggregatedSize}, aggregation key $simple{exchangeProperty.CamelAggregatedCorrelationKey}.  Timeout for aggregation set at: {{rapbackSearchIntermediary.rapbackSearchIntermediaryFederatedQueryTimeout}}"></log>
				<to
					uri="bean:federatedQueryResponseAggregator?method=aggregateGroupMessagesString" />

				<log message="This is the completed aggregated body: ${body}" loggingLevel="DEBUG"/>
				
				<camel:to uri="direct:processFederatedResponse"/>

			</aggregate>
	      
	    </camel:route>
	    
	    <!-- Process aggregated federated responses here -->
		<camel:route>
			<camel:from uri="direct:processFederatedResponse"/>
				
			<!-- This line remove the OJBWrapper element that the aggregator adds, This XPath works because we only have one response -->
			<camel:setBody><xpath>/OJBAggregateResponseWrapper/*[1]</xpath></camel:setBody>
			
			<camel:to uri="bean:wsAddressingReplyToManager?method=getReplyToAddress"/>

			<camel:to uri="bean:wsAddressingReplyToManager?method=removeReplyToAddress"/>
			
			<camel:to uri="bean:WSAddressingEndpointProcessor?method=processReplyToAddress" />	
				
			<camel:choice>
				<camel:when>
					<camel:simple>${in.headers.recipientListReplyToEndpoint} != ''</camel:simple> 
			
					<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage"/>			
					
					<camel:setHeader name="operationName">
			            <constant>ReportOrganizationIdentificationResultsSearchResults</constant>
			        </camel:setHeader>
			        
			        <camel:setHeader name="operationNamespace">
			            <constant>http://ojbc.org/Services/WSDL/OrganizationIdentificationResultsSearchResultsService/1.0</constant>
			        </camel:setHeader>
					
					<camel:log message="About to send rap back search result response message to ${in.headers.recipientListReplyToEndpoint}" />			
								
					<camel:recipientList>
						<camel:header>recipientListReplyToEndpoint</camel:header>
					</camel:recipientList>
				</camel:when>
				<camel:otherwise>
					<camel:log message="Unable to find endpoint for replyTo address: ${in.headers.WSAddressingReplyTo}"/>
				</camel:otherwise>		
			</camel:choice>	

		</camel:route>

	</camelContext>
	
</beans>

