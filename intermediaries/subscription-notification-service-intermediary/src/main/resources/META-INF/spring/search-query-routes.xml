<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2017 Open Justice Broker Consortium

-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:ssreq="http://ojbc.org/IEPD/Exchange/SubscriptionSearchRequest/1.0" 
	xmlns:ssreq-ext="http://ojbc.org/IEPD/Extensions/SubscriptionSearchRequest/1.0"
	xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:ctx="http://www.springframework.org/schema/context" 
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:nc="http://niem.gov/niem/niem-core/2.0" 
	xmlns:sqr-ext="http://ojbc.org/IEPD/Extension/SubscriptionQueryRequest/1.0" 
	xmlns:sqr="http://ojbc.org/IEPD/Exchange/SubscriptionQueryRequest/1.0"	
	xsi:schemaLocation="
	   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<!-- Subscription Search flow -->
	<routeContext id="searchQueryRoutes" xmlns="http://camel.apache.org/schema/spring">		
		<camel:route id="subscriptionSearchRoute">
		
			<camel:from	uri="subscriptionSearchRequestServiceEndpoint" />
			
			<!--  Perform some generic message processing --> 
			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>
			
			<camel:to uri="direct:logRoute"/>	
			
			<camel:choice>
				<camel:when>
					<camel:simple>${properties:dbEnhancedAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
					
						<camel:log message="Enhanced audit logging of subscription request."/>
						
						<camel:to uri="bean:subscriptionSearchRequestSQLProcessor?method=auditSubscriptionSearchRequest"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>			
			
			<camel:choice>
				<camel:when>
					<camel:method bean="accessControlProcessor" method="authorize" />
					<camel:log message="access control returned true, access message: ${in.headers.accessControlResponseMessage}"/>
				</camel:when>
				<camel:otherwise>
					<camel:log message="access control returned false, access message: ${in.headers.accessControlResponseMessage}"/>
				</camel:otherwise>
			</camel:choice>
			
			<camel:doTry>
				<camel:to uri="bean:subscriptionSAMLTokenProcessor?method=retrieveSAMLTokenFromMessageAndAddCamelHeader" />	
				
				<camel:to uri="direct:processSubscriptionSearch"/>

				<camel:doCatch >
					<camel:exception>org.ojbc.intermediaries.sn.exception.InvalidSAMLTokenException</camel:exception>
					<camel:log message="An Invalid SAML Token exception was thrown: ${exception.stacktrace}" loggingLevel="INFO"/>
					<camel:to uri="bean:subscriptionSearchErrorProcessor?method=returnSubscriptionSearchAccessDenied"/>
				</camel:doCatch>
				<camel:doCatch>
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:log message="An exception was thrown: ${exception.stacktrace}" loggingLevel="INFO"/>
					<camel:to uri="bean:subscriptionSearchErrorProcessor?method=returnSubscriptionSearchError"/>
				</camel:doCatch>
			</camel:doTry>	

			<camel:to uri="direct:logRoute"/>

			<camel:choice>
				<camel:when>
					<camel:simple>${properties:dbEnhancedAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:to uri="bean:subscriptionSearchResponseSQLProcessor?method=auditSubscriptionSearchResponse"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>
			
			<camel:setHeader headerName="CamelDestinationOverrideUrl">
				<simple>${in.headers.WSAddressingReplyTo}</simple>
			</camel:setHeader>	

			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage"/>
						 							
			<camel:setHeader headerName="operationName">
	            <constant>ReportSubscriptionSearchResults</constant>
	        </camel:setHeader>
	        
	        <camel:setHeader headerName="operationNamespace">
	            <constant>http://ojbc.org/Services/WSDL/SubscriptionSearchResultsService/1.0</constant>
	        </camel:setHeader>
			
			<camel:to uri="cxf:bean:subscriptionSearchResultsHandlerService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${subscriptionSearchQuery.Cxflogging}" />
			
			<camel:log message="Called Subscription Search Response Handler"/>
			
		</camel:route>
		
		<camel:route id="processSubscriptionSearchRoute">
			<camel:from uri="direct:processSubscriptionSearch"/>
			<camel:log message="processing subscription search" />
			<camel:to uri="direct:processSubscriptionSearchRequest"/>
		</camel:route>
		 
		<camel:route id="processSubscriptionSearchRequest">			
			<camel:from uri="direct:processSubscriptionSearchRequest"/>
			<camel:log message="Process Subscription Search Request: ${body}"/>
			
			<camel:to uri="bean:subscriptionSearchQueryProcessor?method=searchBySubscripitonSearchRequest"/>
			<camel:log message="This is the subscription search response: ${body}" loggingLevel="DEBUG"/>
		</camel:route>		

		<camel:route id="subscriptionQueryRoute">
		
			<camel:from	uri="subscriptionQueryRequestServiceEndpoint" />
			
			<!--  Perform some generic message processing --> 
			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>
			
			<camel:choice>
				<camel:when>
					<camel:simple>${properties:dbAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:to uri="bean:sqlLoggingProcessor?method=logExchange"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>			

			<camel:choice>
				<camel:when>
					<camel:simple>${properties:dbEnhancedAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:to uri="bean:queryRequestSQLLoggingProcessor?method=auditPersonQueryRequest"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>			
			
			<camel:choice>
				<camel:when>
					<camel:method bean="accessControlProcessor" method="authorize" />
					<camel:log message="access control returned true, access message: ${in.headers.accessControlResponseMessage}"/>
				</camel:when>
				<camel:otherwise>
					<camel:log message="access control returned false, access message: ${in.headers.accessControlResponseMessage}"/>
				</camel:otherwise>
			</camel:choice>
			
			<camel:doTry>
				<camel:to uri="bean:subscriptionSAMLTokenProcessor?method=retrieveSAMLTokenFromMessageAndAddCamelHeader" />	
				
				<camel:setHeader headerName="subscriptionQueryId"><xpath>/sqr:SubscriptionQueryRequest/sqr-ext:SubscriptionIdentification/nc:IdentificationID/text()</xpath></camel:setHeader>
				<camel:setHeader headerName="adminQuery"><xpath>/sqr:SubscriptionQueryRequest/sqr-ext:AdminQueryRequestIndicator/text()</xpath></camel:setHeader>
				<camel:log message="adminQuery: ${in.headers.adminQuery}"/>
				
				<camel:to uri="direct:processSubscriptionQuery"/>

				<camel:doCatch >
					<camel:exception>org.ojbc.intermediaries.sn.exception.InvalidSAMLTokenException</camel:exception>
					<camel:log message="An Invalid SAML Token exception was thrown: ${exception.stacktrace}" loggingLevel="INFO"/>
					<camel:to uri="bean:subscriptionSearchErrorProcessor?method=returnSubscriptionSearchAccessDenied"/> 
				</camel:doCatch>
				<camel:doCatch>
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:log message="An exception was thrown: ${exception.stacktrace}" loggingLevel="INFO"/>
 					<camel:to uri="bean:subscriptionQueryErrorProcessor?method=returnSubscriptionQueryError"/> 
				</camel:doCatch>
			</camel:doTry>	

			<camel:choice>
				<camel:when>
					<camel:simple>${properties:dbEnhancedAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:to uri="bean:subscriptionQueryResponseSQLLoggingProcessor?method=auditSubscriptionQueryResponse"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>			
			
			<camel:setHeader headerName="CamelDestinationOverrideUrl">
				<simple>${in.headers.WSAddressingReplyTo}</simple>
			</camel:setHeader>	

			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage"/>
						 							
			<camel:setHeader headerName="operationName">
	            <constant>ReportSubscriptionQueryResults</constant>
	        </camel:setHeader>
	        
	        <camel:setHeader headerName="operationNamespace">
	            <constant>http://ojbc.org/Services/WSDL/SubscriptionQueryResultsService/1.0</constant>
	        </camel:setHeader>
			
			<camel:to uri="cxf:bean:subscriptionQueryResultsHandlerService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${subscriptionSearchQuery.Cxflogging}" />
			
			<camel:log message="Called Subscription Query Response Handler"/>
			
		</camel:route>
		
		<camel:route id="processSubscriptionQueryRoute">
			<camel:from uri="direct:processSubscriptionQuery"/>
			<camel:log message="processing subscription query" />
			
			<camel:to uri="bean:subscriptionSearchQueryDAO?method=queryForSubscription"/>	
			<camel:to uri="bean:subscriptionSearchQueryProcessor?method=buildSubscriptionQueryResponseDoc"/>
			
			
			<camel:log message="This is the subscription query response: ${body}" loggingLevel="DEBUG"/>
		
		</camel:route>		
		
		<camel:route id="logExchange">
			<camel:from uri="direct:logRoute"/>
		
			<camel:choice>
				<camel:when>
					<camel:simple>${properties:dbAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:to uri="bean:sqlLoggingProcessor?method=logExchange"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.stacktrace}"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>				
		
		</camel:route>
		
	</routeContext>
	
	<bean id="messageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor" />
	<bean id="subscriptionSAMLTokenProcessor" class="org.ojbc.intermediaries.sn.subscription.SubscriptionSAMLTokenProcessor" />
	
	<bean id="subscriptionSearchErrorProcessor" class="org.ojbc.intermediaries.sn.subscription.SubscriptionSearchErrorProcessor" />	

	<bean id="subscriptionQueryErrorProcessor" class="org.ojbc.intermediaries.sn.subscription.SubscriptionQueryErrorProcessor" />
	
</beans>

