<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2017 Open Justice Broker Consortium

-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:oiirq-req-doc="http://ojbc.org/IEPD/Exchange/OrganizationIdentificationInitialResultsQueryRequest/1.0"
	xmlns:oisrq-req-doc="http://ojbc.org/IEPD/Exchange/OrganizationIdentificationSubsequentResultsQueryRequest/1.0" 
	xmlns:intel="http://release.niem.gov/niem/domains/intelligence/3.0/"
	xmlns:nc30="http://release.niem.gov/niem/niem-core/3.0/" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:camel="http://camel.apache.org/schema/spring" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- needed cxf imports -->

	<import resource="classpath:META-INF/cxf/cxf.xml" />

	<camelContext xmlns="http://camel.apache.org/schema/spring"
		id="organization-identification-results-search-service-intermediary">
		
		<!-- Identification Results Query Request Endpoints -->
		<endpoint id="identificationResultsQueryRequestServiceEndpoint"
			uri="cxf:bean:identificationResultsQueryRequestService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${identificationResultsQueryIntermediary.cxflogging}" />
			
		<endpoint id="identificationResultsQueryRequestServiceAdapterEndpoint"
			uri="cxf:bean:identificationResultsQueryRequestAdapter?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${identificationResultsQueryIntermediary.cxflogging}" />

		<endpoint id="identificationResultsQueryResultsHandlerServiceEndpoint"
			uri="cxf:bean:identificationResultsQueryResultsHandlerService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${identificationResultsQueryIntermediary.cxflogging}" />
			
		<endpoint id="presentIdentificationResultsQueryResultServiceEndpoint"
			uri="cxf:bean:presentIdentificationResultsQueryResultService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${identificationResultsQueryIntermediary.cxflogging}" />

		<!-- Identification Results Query Request flow -->
		<route id="identificationResultsQueryRequestRoute">
			<from uri="identificationResultsQueryRequestServiceEndpoint" />
			<onException>
				<exception>java.lang.Exception</exception>
				<handled><constant>true</constant></handled>
				<camel:log message="An exception was thrown: ${exception.message}"
					loggingLevel="WARN" />
			</onException>
			
			<!-- Create new exchange using Camel header as the WS Addressing Message ID -->
			<camel:to uri="bean:messageProcessor?method=processRequestPayload"/>

			<camel:choice>
				<camel:when>
					<camel:simple>${properties:identificationResultsQueryIntermediary.dbEnancedAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:to uri="bean:queryRequestSQLLoggingProcessor?method=auditPersonQueryRequest"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>
			
			<!-- Get the SAML Token from the request message and put into OJB SAML Map -->
			<camel:to uri="bean:camelSAMLTokenProcessor?method=retrieveSAMLTokenFromMessage"/>

			<camel:setHeader headerName="federatedQueryEndpointsNodeList">
				<camel:xpath>//intel:SystemIdentification/nc30:SystemName</camel:xpath>
			</camel:setHeader>

 			<camel:setHeader headerName="operationNamespace">
            <constant>http://ojbc.org/Services/WSDL/OrganizationIdentificationResultsQueryRequestService/1.0</constant>
	        </camel:setHeader>
	        
			<!-- We only call one endpoint -->						
			<camel:setHeader headerName="adapterURI">
				<camel:xpath resultType="java.lang.String">//intel:SystemIdentification/nc30:SystemName</camel:xpath>
			</camel:setHeader>
			
			<!-- Add the reply to address to the map using the federated query guid as the key -->
			<camel:to 
				uri="bean:wsAddressingReplyToManager?method=putReplyToAddress"/>
									
			<!-- Call method to populate federated query map -->
			<camel:to
				uri="bean:federatedQueryMessageProcessor?method=processSystemName" />
			
			<!-- Set search request as message body header.  We will split on the source system name and will need the original request -->
			<camel:setHeader headerName="requestMessageBody">
				<camel:simple resultType="org.w3c.dom.Document">${body}</camel:simple>
			</camel:setHeader>

			<!-- This wiretap will start the message timer. -->
			<camel:wireTap uri="direct:startFederatedQueryTimer"/>

			<camel:log message="Timer started"/>

			<camel:split onPrepareRef="prepareFederateQueryMessage" parallelProcessing="false">
				<camel:xpath>//intel:SystemIdentification/nc30:SystemName</camel:xpath>
				<camel:log message="This is the split body: ${body}.  This is the webservice endpoint to call: ${in.headers.webServiceEndpointToCall}" loggingLevel="DEBUG"/>	
				
				<camel:recipientList>
					<camel:header>webServiceEndpointToCall</camel:header>
				</camel:recipientList>
				
			</camel:split>
		</route>

		<camel:route>
			<from uri="direct:startFederatedQueryTimer"/>
			<setBody>
				<constant>START_QUERY_TIMER</constant>
			</setBody>
			<camel:to uri="direct:aggregateFederatedQuery" />		
		</camel:route>
	
		<route id="identificationResultsQueryResponseRoute">
			<from uri="identificationResultsQueryResultsHandlerServiceEndpoint" />

			<camel:to uri="bean:federatedQueryMessageProcessor?method=processFederatedResponse" />
			
			<camel:log message="Calling Aggregator" />
			<camel:to uri="direct:aggregateFederatedQuery" />
 		</route>

	    <camel:route>
	      <from uri="direct:aggregateFederatedQuery" />
			<log message="In aggregator with correlation id: ${in.header.federatedQueryRequestGUID}"/>
			<aggregate groupExchanges="true" eagerCheckCompletion="true">
				<correlationExpression>
					<camel:header>federatedQueryRequestGUID</camel:header>
				</correlationExpression>
				<completionTimeout>
					<camel:simple>${properties:identificationResultsQueryIntermediary.identificationResultsQueryIntermediaryFederatedQueryTimeout}</camel:simple>
				</completionTimeout>
				<completionSize><constant>2</constant></completionSize>
				<log
					message="completed by $simple{property.CamelAggregatedCompletedBy}, completion size $simple{property.CamelAggregatedSize}, aggregation key $simple{property.CamelAggregatedCorrelationKey}.  Timeout for aggregation set at: {{identificationResultsQueryIntermediary.identificationResultsQueryIntermediaryFederatedQueryTimeout}}"></log>
				<to
					uri="bean:federatedQueryResponseAggregator?method=aggregateGroupMessagesString" />

				<log message="This is the completed aggregated body: ${body}" loggingLevel="DEBUG"/>
				
				<camel:to uri="direct:processFederatedResponse"/>

			</aggregate>
	      
	    </camel:route>
	    
	    <!-- Process aggregated federated responses here -->
		<camel:route>
			<camel:from uri="direct:processFederatedResponse"/>
				
			<!-- This line removes the OJBWrapper element that the aggregator adds, This XPath works because we only have one response -->
			<camel:setBody><xpath>/OJBAggregateResponseWrapper/*[1]</xpath></camel:setBody>
			
			<camel:choice>
				<camel:when>
					<camel:simple>${properties:identificationResultsQueryIntermediary.dbEnancedAuditLog} == 'true'</camel:simple>
					
					<camel:doTry>
						<camel:convertBodyTo type="java.lang.String"/>
					
						<camel:log message="Message body: ${body}"/>
					
						<camel:to uri="bean:queryResponseSQLLoggingProcessor?method=auditIdentificationQueryResponse"/>
						
				        <doCatch>
				            <exception>java.lang.Exception</exception>
				            <camel:log message="logging returned exception, handling and continuing: ${exception.message}"/>
				        </doCatch>
					</camel:doTry>
				</camel:when>
			</camel:choice>			
			
			<camel:to uri="bean:wsAddressingReplyToManager?method=getReplyToAddress"/>

			<camel:to uri="bean:wsAddressingReplyToManager?method=removeReplyToAddress"/>
			
			<camel:to uri="bean:WSAddressingEndpointProcessor?method=processReplyToAddress" />	
				
			<camel:choice>
				<camel:when>
					<camel:simple>${in.headers.recipientListReplyToEndpoint} != ''</camel:simple> 
					
					<camel:choice>
						<camel:when>
							<camel:simple>${in.headers.operationName} == 'SubmitOrganizationIdentificationInitialResultsQueryResults'</camel:simple>
							<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage"/>
							<camel:setHeader headerName="operationName">
					            <constant>SubmitOrganizationIdentificationInitialResultsQueryResults</constant>
					        </camel:setHeader>
						</camel:when>
						<camel:when>
							<camel:simple>${in.headers.operationName} == 'SubmitOrganizationIdentificationNsorFiveYearCheckQueryResults'</camel:simple>
							<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage"/>
							<camel:setHeader headerName="operationName">
					            <constant>SubmitOrganizationIdentificationNsorFiveYearCheckQueryResults</constant>
					        </camel:setHeader>
						</camel:when>
						<camel:when>
							<camel:simple>${in.headers.operationName} == 'SubmitOrganizationIdentificationSubsequentResultsQueryResults'</camel:simple>
							<camel:to uri="bean:messageProcessor?method=prepareNewExchangeResponseMessage"/>
							<camel:setHeader headerName="operationName">
					            <constant>SubmitOrganizationIdentificationSubsequentResultsQueryResults</constant>
					        </camel:setHeader>
						</camel:when>
					</camel:choice>
			        
			        <camel:setHeader headerName="operationNamespace">
			            <constant>http://ojbc.org/Services/WSDL/OrganizationIdentificationResultsQueryResultsService/1.0</constant>
			        </camel:setHeader>
	        
					<camel:log message="About to send rap back search result response message to ${in.headers.recipientListReplyToEndpoint}" />			
								
					<camel:recipientList>
						<camel:header>recipientListReplyToEndpoint</camel:header>
					</camel:recipientList>
				</camel:when>
				<camel:otherwise>
					<camel:log message="Unable to find endpoint for replyTo address: ${in.headers.WSAddressingReplyTo}"/>
				</camel:otherwise>		
			</camel:choice>	

		</camel:route>

	</camelContext>
	
	<!-- Spring Beans -->
	<util:map map-class="java.util.HashMap" id="federatedQueryManager" />

	<bean id="federatedQueryResponseAggregator"
		class="org.ojbc.util.fedquery.processor.FederatedQueryResponseHandlerAggregator">
		<property name="federatedQueryManager">
			<ref bean="federatedQueryManager" />
		</property>
	</bean>

	<bean id="messageProcessor" class="org.ojbc.util.camel.processor.MessageProcessor" />
	
	<!-- Used to retrieve and persist SAML tokens -->
	<bean id="camelSAMLTokenProcessor" class="org.ojbc.util.camel.security.saml.CamelSAMLTokenProcessor">
		<property name="OJBSamlMap" ref="ojbSamlMap"/>
	</bean>
	<bean id="ojbSamlMap" class="org.ojbc.util.camel.security.saml.OJBSamlMap" />
	
	<bean class="org.ojbc.util.camel.security.saml.OJBSamlCallbackHandler" id="ojbSamlCallbackHandler">
		<property name="OJBSamlMap" ref="ojbSamlMap"/>
	</bean>

	<bean id="prepareFederateQueryMessage" class="org.ojbc.util.fedquery.processor.PrepareFederatedQueryMessage">
		<property name="exchangeDestinationLookupStrategy" ref="exchangeDestinationLookupStrategy"/>
	</bean>

   	<bean id="WSAddressingEndpointProcessor" class="org.ojbc.util.camel.processor.WSAddressingEndpointProcessor">
		<property name ="endpointReplyToMap" ref="wsAddressReplyToEndpointMap"/>
	</bean>		

    <bean id="federatedQueryMessageProcessor" class="org.ojbc.util.fedquery.processor.FederatedQueryMessageProcessor">
		<property name="federatedQueryManager">
			<ref bean="federatedQueryManager" />
		</property>
	</bean>
	<bean id="wsAddressingReplyToManager" class="org.ojbc.util.fedquery.processor.WSAddressingReplyToManager">
		<property name="wsAddressingEndpointProcessor" ref="WSAddressingEndpointProcessor"/>
	</bean>
	 
	<bean id="exchangeDestinationLookupStrategy" class="org.ojbc.util.fedquery.processor.RecordSourceExchangeDestinationLookupStrategy">
		<property name="federatedQueryEndpointMap">
			<util:map >
				<entry key="rap-back-data-store" value="identificationResultsQueryRequestServiceAdapterEndpoint" />
			</util:map>	
		</property>

		<property name="adapterURItoAddressMap">
			<util:map >
				<entry key="rap-back-data-store" value="${identificationResultsQueryIntermediary.rapbackDataStoreEndpoint}" />
			</util:map>	
		</property>
  	</bean>

	<util:map map-class="java.util.HashMap" id="wsAddressReplyToEndpointMap">
        <entry key="${identificationResultsQueryIntermediary.presentIdentificationResultsQueryResultEndpoint}" value="presentIdentificationResultsQueryResultServiceEndpoint"/>
  	</util:map>
  	
  	<bean id="queryRequestSQLLoggingProcessor" class="org.ojbc.audit.enhanced.processor.QueryRequestSQLProcessor">
        <property name="enhancedAuditDAO" ref="enhancedAuditDAOImpl"/>
        <property name="userInfoProcessor" ref="userInfoSQLProcessor"/>
    </bean>

  	<bean id="queryResponseSQLLoggingProcessor" class="org.ojbc.audit.enhanced.processor.IdentificationQueryResponseSQLProcessor">
        <property name="enhancedAuditDAO" ref="enhancedAuditDAOImpl"/>
    </bean>

	<bean id="userInfoSQLProcessor" class="org.ojbc.audit.enhanced.processor.UserInfoSQLProcessor">
        <property name="enhancedAuditDAO" ref="enhancedAuditDAOImpl"/>
    </bean>
    
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
 	   <constructor-arg ref="dataSourceEnhancedAudit"/>
	</bean>
	
	<bean id="namedParameterJdbcTemplate" 
      class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
 	   <constructor-arg ref="dataSourceEnhancedAudit"/>
	</bean>

	<bean id="enhancedAuditDAOImpl" class="org.ojbc.audit.enhanced.dao.EnhancedAuditDAOImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate"/>
		<property name="namedParameterJdbcTemplate" ref="namedParameterJdbcTemplate"/>
	</bean>    
    
	<bean id="dataSourceEnhancedAudit" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${enhancedAudit.dataSource.driverClass}" />
		<property name="url" value="${enhancedAudit.dataSource.jdbcUrl}" />
		<property name="username" value="${enhancedAudit.dataSource.user}" />
		<property name="password" value="${enhancedAudit.dataSource.password}" />
		<property name="initialSize" value="${enhancedAudit.dataSource.minPoolSize}" />
		<property name="maxActive" value="${enhancedAudit.dataSource.maxPoolSize}" />
		<property name="validationQuery" value="select 1" />
		<property name="testOnBorrow" value="true" />
	</bean>	
	 
</beans>

