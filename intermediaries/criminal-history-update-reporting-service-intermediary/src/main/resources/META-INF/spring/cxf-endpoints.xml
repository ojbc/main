<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2017 Open Justice Broker Consortium

-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:cxf="http://camel.apache.org/schema/cxf/jaxws" xmlns:util="http://www.springframework.org/schema/util"
  xmlns:sec="http://cxf.apache.org/configuration/security" xmlns:http="http://cxf.apache.org/transports/http/configuration"
  xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration" xmlns:policy="http://cxf.apache.org/policy"
  xmlns:camel="http://camel.apache.org/schema/spring"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf/jaxws http://camel.apache.org/schema/cxf/jaxws/camel-cxf-spring-soap-4.12.0-spring.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
       http://cxf.apache.org/configuration/security	http://cxf.apache.org/schemas/configuration/security.xsd
       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
       http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd
       http://cxf.apache.org/policy http://cxf.apache.org/schemas/policy.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring-4.12.0.xsd">

  <!-- hosted by this intermediary, invoked by connector -->
  <cxf:cxfEndpoint id="criminalHistoryUpdateReportingService" address="${criminalHistoryReportingServiceEndpoint}"
    wsdlURL="classpath:ssp/Criminal_History_Update_Reporting/schema/SIP_WS_1.2/Criminal_History_Update_Reporting_Service.wsdl"
    serviceName="ojbc:Criminal-History-Update-Reporting-ServiceService" endpointName="ojbc:Criminal-History-Update-Reporting-Secure-Service"
    xmlns:ojbc="http://ojbc.org/Services/WSDL/CriminalHistoryUpdateReportingService/1.0">
    <cxf:properties>
      <entry key="ws-security.callback-handler" value-ref="passwordCallbackHandler" />
      <entry key="ws-security.signature.properties" value-ref="criminalHistoryReportingKeystoreProperties" />
      <entry key="ws-security.signature.username" value="${criminalHistoryReporting.intermediarySigningUserAlias}" />
      <entry key="publishedEndpointUrl" value="${criminalHistoryUpdateReportingService.publishedEndpointUrl:}" />
    </cxf:properties>
    <cxf:features>
      <bean class="org.apache.cxf.ext.logging.LoggingFeature">
        <property name="prettyLogging" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
        <property name="logBinary" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
        <property name="verbose" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
      </bean>
    </cxf:features>
  </cxf:cxfEndpoint>

  <!-- hosted by this intermediary, invoked by connector, no WS Policy on this binding -->
  <cxf:cxfEndpoint id="criminalHistoryUpdateReportingSSLService" address="${criminalHistoryReportingServiceNoWSSecurityEndpoint}"
    wsdlURL="classpath:ssp/Criminal_History_Update_Reporting/schema/SIP_WS_1.2/Criminal_History_Update_Reporting_Service.wsdl"
    serviceName="ojbc:Criminal-History-Update-Reporting-ServiceService" endpointName="ojbc:Criminal-History-Update-Reporting-Service"
    xmlns:ojbc="http://ojbc.org/Services/WSDL/CriminalHistoryUpdateReportingService/1.0">
    <cxf:features>
      <bean class="org.apache.cxf.ext.logging.LoggingFeature">
        <property name="prettyLogging" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
        <property name="logBinary" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
        <property name="verbose" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
      </bean>
    </cxf:features>
  </cxf:cxfEndpoint>

  <!-- hosted by adapter, called by intermediary -->
  <cxf:cxfEndpoint id="criminalhistoryUpdateReportingAdapterService" address="${criminalHistoryReportingServiceAdapterEndpoint}"
    wsdlURL="classpath:ssp/Criminal_History_Update_Reporting/schema/SIP_WS_1.2/Criminal_History_Update_Reporting_Service.wsdl"
    serviceName="ojbc:Criminal-History-Update-Reporting-ServiceService" endpointName="ojbc:Criminal-History-Update-Reporting-Secure-Service"
    xmlns:ojbc="http://ojbc.org/Services/WSDL/CriminalHistoryUpdateReportingService/1.0">
    <cxf:properties>
      <entry key="ws-security.callback-handler" value-ref="passwordCallbackHandler" />
      <entry key="ws-security.signature.properties" value-ref="criminalHistoryReportingKeystoreProperties" />
      <entry key="ws-security.signature.username" value="${criminalHistoryReporting.intermediarySigningUserAlias}" />
    </cxf:properties>
    <cxf:features>
      <bean class="org.apache.cxf.ext.logging.LoggingFeature">
        <property name="prettyLogging" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
        <property name="logBinary" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
        <property name="verbose" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
      </bean>
    </cxf:features>
  </cxf:cxfEndpoint>

  <!-- OJB Notification Broker Service, invoked by intermediary -->
  <cxf:cxfEndpoint id="notificationBrokerService" address="${criminalHistoryUpdateReportingService.notificationBrokerEndpoint}"
    wsdlURL="classpath:ssp/Subscription_Notification/WSDL/OJBWSNotification.wsdl" serviceName="ojb-nb:NotificationBrokerServiceService"
    endpointName="ojb-nb:NotificationBrokerService" xmlns:ojb-nb="http://www.ojbc.org/SubscribeNotify/NotificationBroker">
    <cxf:features>
      <bean class="org.apache.cxf.ext.logging.LoggingFeature">
        <property name="prettyLogging" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
        <property name="logBinary" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
        <property name="verbose" value="${criminalHistoryReportingServiceIntermediaryCxflogging}" />
      </bean>
    </cxf:features>
  </cxf:cxfEndpoint>

  <!-- Used for SSL/TLS Connection. No CCA, just SSL. -->
  <http:conduit name="https://.*">
    <http:tlsClientParameters disableCNCheck="true">
      <sec:keyManagers keyPassword="${criminalHistoryReporting.intermediaryKeyPassword}">
        <sec:keyStore type="jks" password="${criminalHistoryReporting.intermediaryKeystorePassword}"
          url="${criminalHistoryReporting.intermediaryKeystoreLocation}" />
      </sec:keyManagers>
      <sec:trustManagers>
        <sec:keyStore type="JKS" password="${criminalHistoryReporting.intermediaryTruststorePassword}"
          url="${criminalHistoryReporting.intermediaryTruststoreLocation}" />
      </sec:trustManagers>
      <sec:cipherSuitesFilter>
        <sec:include>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</sec:include>
        <sec:include>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
        <sec:include>TLS_RSA_WITH_AES_128_CBC_SHA</sec:include>
        <sec:include>SSL_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
      </sec:cipherSuitesFilter>
    </http:tlsClientParameters>
    <http:client AutoRedirect="true" Connection="Keep-Alive" />
  </http:conduit>

  <!-- Define a Properties object with the properties required by the org.apache.ws.security.components.crypto.Merlin WSS4j Crypto implementation. This 
    crypto config is used for signature creation and validation. -->
  <util:properties id="criminalHistoryReportingKeystoreProperties">

    <!-- Defines the implementation class. -->
    <prop key="org.apache.wss4j.crypto.provider">org.apache.wss4j.common.crypto.Merlin</prop>

    <!-- The type of the keystore pointed to by org.apache.ws.security.crypto.merlin.file. -->
    <prop key="org.apache.wss4j.crypto.merlin.keystore.type">jks</prop>
    <prop key="org.apache.wss4j.crypto.merlin.keystore.password">${criminalHistoryReporting.intermediaryKeystorePassword}</prop>
    <prop key="org.apache.wss4j.crypto.merlin.file">${criminalHistoryReporting.intermediaryKeystoreLocation}</prop>
  </util:properties>

  <bean id="passwordCallbackHandler" class="org.ojbc.util.ws.security.ClientCallbackMap">
    <property name="passwords">
      <map>
        <entry key="${criminalHistoryReporting.intermediarySigningUserAlias}" value="${criminalHistoryReporting.intermediaryKeyPassword}" />
      </map>
    </property>
  </bean>

</beans>

