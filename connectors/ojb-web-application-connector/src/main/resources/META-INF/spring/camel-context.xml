<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2017 Open Justice Broker Consortium

-->
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       ">
    <!-- needed cxf imports -->
    <import resource="classpath:META-INF/cxf/cxf.xml"/>
	
	<camel:camelContext xmlns="http://camel.apache.org/schema/spring">
	    
	    
	    <!--Person Merge Notification Search Response Listener -->
	    <camel:route id="personMergeSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="personMergeSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Person Merge Search Results: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:personSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:personSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>
	    
	    <!-- Wildlife License Response Listener -->
	    <camel:route id="personQueryWildlifeLicenseResultsServiceEndpointRoute" autoStartup="false">
	    	<from uri="personQueryWildlifeLicenseResultsServiceEndpoint"/>
	    	<camel:log message="Received response message - Wildlife License: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:wildlifeLicensingMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:wildlifeLicensingRequestProcessor?method=updateMapWithResponse"/>

	    </camel:route>	    
	    
	    <!-- Professional License Response Listener -->
	    <camel:route id="personQueryProfessionalLicenseResultsServiceEndpointRoute" autoStartup="false">
	    	<from uri="personQueryProfessionalLicenseResultsServiceEndpoint"/>
	    	<camel:log message="Received response message - Professional License: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:professionalLicensingMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:professionalLicensingRequestProcessor?method=updateMapWithResponse"/>

	    </camel:route>	  	    
	    
	    <!-- Cannabis License Response Listener -->
	    <camel:route id="personQueryCannabisLicenseResultsServiceEndpointRoute" autoStartup="false">
	    	<from uri="personQueryCannabisLicenseResultsServiceEndpoint"/>
	    	<camel:log message="Received response message - Cannabis License: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:cannabisLicensingMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:cannabisLicensingRequestProcessor?method=updateMapWithResponse"/>

	    </camel:route>	  	    	    
	    	        
	    <!-- Criminal History Response Listener -->
	    <camel:route id="personQueryResultsHandlerCriminalHistoryServiceRoute" autoStartup="false">
	    	<from uri="personQueryResultsHandlerCriminalHistoryServiceEndpoint"/>
	    	<camel:log message="Received response message - Criminal History: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:criminalHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:criminalHistoryRequestProcessor?method=updateMapWithResponse"/>

	    </camel:route>

	    <!-- Warrants Response Listener -->
	    <camel:route id="personQueryResultsHandlerWarrantsServiceRoute" autoStartup="false">
	    	<from uri="personQueryResultsHandlerWarrantsServiceEndpoint"/>
	    	<camel:log message="Received response message - Warrants: ${body}" loggingLevel="DEBUG"/>
	    	
	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:warrantsMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:warrantsRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!-- Incident Report Response Listener -->
	    <camel:route id="incidentReportResultsHandlerServiceRoute" autoStartup="false">
	    	<from uri="incidentReportResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Incident Report ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:incidentReportRequestMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:incidentReportRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!-- Incident Search Request Listener, This route handles only Person / Vehicle to Incident Queries -->
	    <camel:route id="personVehicleToIncidentSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="personVehicleToIncidentSearchResultsHandlerServiceEndpoint"/>
	    		    	
	    	<camel:log message="Received response message - Incident Search ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
	    	<!-- We can use any message processor to process the payload, it is generic method -->
			<camel:to uri="bean:personToIncidentMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:personVehicleToIncidentSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!--Incident Merge Notification Search Response Listener -->
	    <camel:route id="incidentSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="incidentSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Incident Merge Search Results: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. -->
			<camel:to uri="bean:incidentSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:incidentSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Incident Merge Notification Search Response Listener -->
	    <camel:route id="vehicleSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="vehicleSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Vehicle Merge Search Results: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. -->
			<camel:to uri="bean:vehicleSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:vehicleSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    
	    
	    <!--Firearm Merge Notification Search Response Listener -->
	    <camel:route id="firearmSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="firearmSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Firearm Merge Search Results: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. -->
			<camel:to uri="bean:firearmSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:firearmSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	
	    
	    <!--Firearm Registration Query Response Listener -->
	    <camel:route id="firearmRegistrationQueryResultsHandlerRoute" autoStartup="false">
	    	<from uri="firearmRegistrationQueryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Firearm Reg Query Results: ${body}" loggingLevel="INFO"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. -->
			<camel:to uri="bean:firearmRegistrationQueryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:firearmRegistrationQueryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	
	    
	    <!-- Subscription Search Response Listener -->
	    <camel:route id="subscriptionSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="subscriptionSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Subscription Search: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:subscriptionSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:subscriptionSearchRequestProcessor?method=updateMapWithResponse"/>

	    </camel:route>

	    <!-- Subscription Query Response Listener -->
	    <camel:route id="subscriptionQueryResultsHandlerRoute" autoStartup="false">
	    	<from uri="subscriptionQueryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Subscription Query: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
			<camel:to uri="bean:subscriptionQueryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:subscriptionQueryRequestProcessor?method=updateMapWithResponse"/>

	    </camel:route>

	    <!--Policy Based Access Control Response Listener -->
	    <camel:route id="identityBasedAccessControlResultsHandlerRoute" autoStartup="false">
	    	<from uri="accessControlResponseServiceEndpoint"/>
	    	<camel:log message="Received response message - Identity Based Access Control result: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:identityBasedAccessControlMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:identityBasedAccessControlRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!--Policy Acknowledgement Recording Response Listener -->
	    <camel:route id="policyAcknowledgementRecordingResultsHandlerRoute" autoStartup="false">
	    	<from uri="policyAcknowledgementRecordingResponseServiceEndpoint"/>
	    	<camel:log message="Received response message - Policy Acknowledgement Recording Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:policyAcknowledgingMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:policyAcknowledgingRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Case Plan Listener -->
	    <camel:route id="juvenileCasePlanHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenileCasePlanHistoryResultsHandlerServiceEndpoint"/>
	    	
	    	<camel:log message="Received response message - Juvenile Case Plan Response:${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryCasePlanHistoryMessageProcessor?method=processRequestPayload" />
			
	    	
			<camel:to uri="bean:juvenileCasePlanHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Hearing Listener -->
	    <camel:route id="juvenileHearingHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenileHearingHistoryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Juvenile Hearing Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryHearingHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:juvenileHearingHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Intake Listener -->
	    <camel:route id="juvenileIntakeHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenileIntakeHistoryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Juvenile Intake Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryIntakeHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:juvenileIntakeHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Offense Listener -->
	    <camel:route id="juvenileOffenseHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenileOffenseHistoryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Juvenile Offense Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryOffenseHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:juvenileOffenseHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Placement Listener -->
	    <camel:route id="juvenilePlacementHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenilePlacementHistoryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Juvenile Placement Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryPlacementHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:juvenilePlacementHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    

	    <!--Juvenile Referral Listener -->
	    <camel:route id="juvenileReferralHistoryResultsHandlerRoute" autoStartup="false">
	    	<from uri="juvenileReferralHistoryResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Juvenile Referral Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:juvenileQueryReferralHistoryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:juvenileReferralHistoryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>
	    	    
	    <!--Rapback Search Result Listener -->
	    <camel:route id="rapbackSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="rapbackSearchResultsHandlerServiceEndpoint"/>
	    	<camel:log message="Received response message - Rap Back Search Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:rapbackSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:rapbackSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>	    
	    
	    <!--Identification Results Query Result Listener -->
	    <camel:route id="identificationResultsQueryResultsHandlerRoute" autoStartup="false">
	    	<from uri="identificationResultsQueryResultsHandlerServiceEndpoint" />
	    	<camel:log message="Received response message - Identification Results Query Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:identificationResultsQueryMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:identificationResultsQueryRequestProcessor?method=updateMapWithResponseExchange"/>
	    </camel:route>	    
	    
	    <!--Identification Results Modification Result Listener -->
	    <camel:route id="identificationResultsModificationResultsHandlerRoute" autoStartup="false">
	    	<from uri="identificationResultsModificationResultsHandlerServiceEndpoint" />
	    	<camel:log message="Received response message - Identification Results Modification Response: ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID. This is a generic processor and provided by abstract class -->
			<camel:to uri="bean:identificationResultsModificationMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	
			<camel:to uri="bean:identificationResultsModificationRequestProcessor?method=updateMapWithResponseExchange"/>
	    </camel:route>	    
	    
	    <!-- Court Case Search Request Listener -->
	    <camel:route id="personToCourtCaseSearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="personToCourtCaseSearchResultsHandlerServiceEndpoint"/>
	    		    	
	    	<camel:log message="Received response message - Court Case Search ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
	    	<!-- We can use any message processor to process the payload, it is generic method -->
			<camel:to uri="bean:personToCourtCaseSearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:personToCourtCaseSearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!-- Court Case Query Request Listener -->
	    <camel:route id="courtCaseQueryResultsHandlerRoute" autoStartup="false">
	    	<from uri="courtCaseQueryResultsHandlerServiceEndpoint"/>
	    		    	
	    	<camel:log message="Received response message - Court Case Search ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
	    	<!-- We can use any message processor to process the payload, it is generic method -->
			<camel:to uri="bean:courtCaseQueryRequestMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:courtCaseQueryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!-- Custody Search Request Listener -->
	    <camel:route id="personToCustodySearchResultsHandlerRoute" autoStartup="false">
	    	<from uri="personToCustodySearchResultsHandlerServiceEndpoint"/>
	    		    	
	    	<camel:log message="Received response message - Custody Search ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
	    	<!-- We can use any message processor to process the payload, it is generic method -->
			<camel:to uri="bean:personToCustodySearchMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:personToCustodySearchRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!-- Custody Query Request Listener -->
	    <camel:route id="custodyQueryResultsHandlerRoute" autoStartup="false">
	    	<from uri="custodyQueryResultsHandlerServiceEndpoint"/>
	    		    	
	    	<camel:log message="Received response message - Custody Query ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
	    	<!-- We can use any message processor to process the payload, it is generic method -->
			<camel:to uri="bean:custodyQueryRequestMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:custodyQueryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!-- Vehicle Crash Query Result Listener -->
	    <camel:route id="vehicleCrashQueryResultsHandlerRoute" autoStartup="false">
	    	<from uri="vehicleCrashQueryResultsHandlerServiceEndpoint"/>
	    		    	
	    	<camel:log message="Received response message - Vehicle Crash Query Result ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
	    	<!-- We can use any message processor to process the payload, it is generic method -->
			<camel:to uri="bean:vehicleCrashMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:vehicleCrashQueryRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	    <!-- Firearms Purchase Prohibition Query Result Listener --> 
	    <camel:route id="firearmsPurchaseProhibitionQueryResultsHandlerRoute" autoStartup="false">
	    	<from uri="firearmsPurchaseProhibitionQueryResultsServiceEndpoint"/>
	    		    	
	    	<camel:log message="Received response message - Firearms Prohbition Query Result ${body}" loggingLevel="DEBUG"/>

	    	<!-- Get the WS-Addressing ID, set Camel header: federatedQueryRequestGUID -->
	    	<!-- We can use any message processor to process the payload, it is generic method -->
			<camel:to uri="bean:firearmsPurchaseProhibitionMessageProcessor?method=processRequestPayload" />
			
	    	<camel:convertBodyTo type="java.lang.String"/>
	    	<camel:to uri="bean:firearmsPurchaseProhibitionRequestProcessor?method=updateMapWithResponse"/>
	    </camel:route>

	</camel:camelContext>

	<!-- SAML map to persist tokens between CXF and Camel -->	
	<bean id="ojbSamlMap" class="org.ojbc.util.camel.security.saml.OJBSamlMap" />
	
</beans>
