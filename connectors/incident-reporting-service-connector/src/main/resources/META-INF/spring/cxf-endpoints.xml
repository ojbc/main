<?xml version="1.0" encoding="UTF-8"?>
<!--

    Unless explicitly acquired and licensed from Licensor under another license, the contents of
    this file are subject to the Reciprocal Public License ("RPL") Version 1.5, or subsequent
    versions as allowed by the RPL, and You may not copy or use this file in either source code
    or executable form, except in compliance with the terms and conditions of the RPL

    All software distributed under the RPL is provided strictly on an "AS IS" basis, WITHOUT
    WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND LICENSOR HEREBY DISCLAIMS ALL SUCH
    WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the RPL for specific language
    governing rights and limitations under the RPL.

    http://opensource.org/licenses/RPL-1.5

    Copyright 2012-2017 Open Justice Broker Consortium

-->
<!-- Configures the CXF endpoints -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xmlns:policy="http://cxf.apache.org/policy" xmlns:wsp="http://www.w3.org/2006/07/ws-policy"
	xmlns:camel="http://camel.apache.org/schema/spring" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:sec="http://cxf.apache.org/configuration/security" xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
	xsi:schemaLocation="
	   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
	   http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/policy http://cxf.apache.org/schemas/policy.xsd
       http://www.w3.org/2006/07/ws-policy http://www.w3.org/2006/07/ws-policy.xsd
       http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd
       http://cxf.apache.org/transports/http-jetty/configuration http://cxf.apache.org/schemas/configuration/http-jetty.xsd  
       http://cxf.apache.org/configuration/security	http://cxf.apache.org/schemas/configuration/security.xsd">

	<!-- endpoints -->
	<camel:endpoint id="IncidentReportingServiceEndpoint"
		uri="cxf:bean:IncidentReportingService?dataFormat=PAYLOAD&amp;loggingFeatureEnabled=${incidentChargeReporting.incidentReportingServiceIntermediaryCxflogging}&amp;synchronous=true" />

	<!-- OJB Incident Reporting Service, called by this intermediary -->
	<cxf:cxfEndpoint id="IncidentReportingService"
		address="${incidentChargeReporting.incidentReportingServiceEndpoint}"
		wsdlURL="classpath:ssp/Incident_Reporting/schema/SIP_WS_1.2/Incident_Reporting_Service.wsdl"
		serviceName="ojbc:Incident-Reporting-ServiceService" endpointName="ojbc:Incident-Reporting-Secure-Service"
		xmlns:ojbc="http://ojbc.org/Services/WSDL/IncidentReportingService/1.0">
		<cxf:properties>
			<entry key="ws-security.callback-handler" value-ref="passwordCallbackHandler" />
			<entry key="ws-security.signature.properties" value-ref="incidentReportingKeystoreProperties" />
			<entry key="ws-security.signature.username"
				value="${incidentChargeReporting.keystoreCertificateAlias}" />
			<entry key="org.apache.cxf.stax.maxTextLength" value="2147483647"/>
		</cxf:properties>
	</cxf:cxfEndpoint>

	<util:properties id="incidentReportingKeystoreProperties">
		<prop key="org.apache.wss4j.crypto.provider">org.apache.wss4j.common.crypto.Merlin</prop>
		<prop key="org.apache.wss4j.crypto.merlin.keystore.type">jks</prop>
		<prop key="org.apache.wss4j.crypto.merlin.keystore.password">${incidentChargeReporting.keystorePassword}</prop>
		<prop key="org.apache.wss4j.crypto.merlin.keystore.alias">${incidentChargeReporting.keystoreCertificateAlias}
		</prop>
		<prop key="org.apache.wss4j.crypto.merlin.keystore.file">${incidentChargeReporting.keystoreLocation}</prop>
	</util:properties>

	<bean id="passwordCallbackHandler" class="org.ojbc.util.ws.security.ClientCallbackMap">
		<property name="passwords">
			<map>
				<entry key="${incidentChargeReporting.keystoreCertificateAlias}"
					value="${incidentChargeReporting.keyPassword}" />
			</map>
		</property>
	</bean>
	<!-- Used for SSL/TLS Connection. No CCA, just SSL. -->
	<http:conduit name="https://.*">
		<http:tlsClientParameters disableCNCheck="true">
			<sec:keyManagers keyPassword="${incidentChargeReporting.keyPassword}">
	        	<sec:keyStore type="jks" password="${incidentChargeReporting.keystorePassword}" url="${incidentChargeReporting.keystoreLocation}" />
	    	</sec:keyManagers>
			<sec:trustManagers>
				<sec:keyStore type="JKS"
					password="${incidentChargeReporting.truststorePassword}" url="${incidentChargeReporting.truststoreLocation}" />
			</sec:trustManagers>
			<sec:cipherSuitesFilter>
				<sec:include>TLS_DHE_RSA_WITH_AES_128_CBC_SHA</sec:include>
				<sec:include>SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
				<sec:include>TLS_RSA_WITH_AES_128_CBC_SHA</sec:include>
				<sec:include>SSL_RSA_WITH_3DES_EDE_CBC_SHA</sec:include>
			</sec:cipherSuitesFilter>
		</http:tlsClientParameters>
		<http:client AutoRedirect="true" Connection="Keep-Alive" />
	</http:conduit>

</beans>
